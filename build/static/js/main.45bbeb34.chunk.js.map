{"version":3,"sources":["Store.js","Dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["socket","CTX","React","createContext","RECEIVE_MESSAGE","initState","general","from","msg","focusGroup","reducer","state","action","payload","topic","type","sendChatAction","value","emit","Store","props","useReducer","allChats","dispatch","io","on","user","Math","random","toFixed","Provider","children","useStyles","makeStyles","theme","root","margin","padding","spacing","flex","display","alignItems","chatWindow","width","height","chatBox","topicsWindow","borderRight","button","input","Dashboard","classes","useContext","topics","Object","keys","useState","activeTopic","changeActiveTopic","textValue","changeTextValue","Paper","className","Typography","variant","component","List","map","ListItem","onClick","ev","target","innerText","key","ListItemText","primary","chat","i","Chip","label","chip","TextField","onChange","e","Button","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.45bbeb34.chunk.js","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\n\nexport const CTX = React.createContext();\n\nconst RECEIVE_MESSAGE = 'RECEIVE_MESSAGE';\n\nconst initState = {\n  general: [\n    { from: 'Archer', msg: 'Yo' },\n    { from: 'Saber', msg: 'Sup' },\n    { from: 'Caster', msg: 'Hey' }\n  ],\n  focusGroup: [\n    { from: 'Lancer', msg: 'hmph' },\n    { from: 'Rider', msg: 'oh?' },\n    { from: 'Berzerker', msg: '...' }\n  ]\n};\n\nfunction reducer(state, action) {\n  const { from, msg, topic } = action.payload;\n\n  switch (action.type) {\n    case 'RECEIVE_MESSAGE':\n      return {\n        ...state,\n        [topic]: [\n          ...state[topic],\n          {\n            from,\n            msg\n          }\n        ]\n      };\n    default:\n      return state;\n  }\n}\n\nlet socket;\n\nfunction sendChatAction(value) {\n  socket.emit('chat message', value);\n}\n\nexport default function Store(props) {\n  const [allChats, dispatch] = React.useReducer(reducer, initState);\n\n  if (!socket) {\n    socket = io(':3001');\n    socket.on('chat message', function(msg) {\n      dispatch({ type: RECEIVE_MESSAGE, payload: msg });\n      // $('#messages').append($('<li>').text(msg));\n    });\n  }\n\n  const user = 'Assassin' + Math.random(100).toFixed(2);\n\n  return (\n    <CTX.Provider value={{ allChats, sendChatAction, user }}>\n      {props.children}\n    </CTX.Provider>\n  );\n}\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n// import Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport { CTX } from './Store';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '50px',\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  chatWindow: {\n    width: '70%',\n    height: '300px',\n    padding: '20px'\n  },\n  chatBox: {\n    width: '85%'\n  },\n  topicsWindow: {\n    width: '30%',\n    height: '300px',\n    borderRight: '1px solid grey'\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    display: 'none'\n  }\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  // Ctx Store\n  const { allChats, sendChatAction, user } = React.useContext(CTX);\n\n  const topics = Object.keys(allChats);\n\n  // Local state\n  const [activeTopic, changeActiveTopic] = React.useState(topics[0]);\n  const [textValue, changeTextValue] = React.useState('');\n\n  return (\n    <div>\n      <Paper className={classes.root}>\n        <Typography variant=\"h4\" component=\"h4\">\n          Community\n        </Typography>\n        <Typography variant=\"h5\" component=\"h5\">\n          {activeTopic}\n        </Typography>\n        <div className={classes.flex}>\n          <div className={classes.topicsWindow}>\n            <List>\n              {topics.map(topic => (\n                <ListItem\n                  onClick={ev => changeActiveTopic(ev.target.innerText)}\n                  key={topic}\n                  button\n                >\n                  <ListItemText primary={topic} />\n                </ListItem>\n              ))}\n            </List>\n          </div>\n          <div className={classes.chatWindow}>\n            {allChats[activeTopic].map((chat, i) => (\n              <div className={classes.flex} key={i}>\n                <Chip label={chat.from} className={classes.chip} />\n                <Typography variant=\"h6\" component=\"h6\">\n                  &nbsp;:&nbsp;{chat.msg}\n                </Typography>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className={classes.flex}>\n          <div className={classes.chatBox}>\n            <TextField\n              className={classes.chatBox}\n              label=\"Send a Message\"\n              value={textValue}\n              onChange={e => changeTextValue(e.target.value)}\n            />\n          </div>\n          <div className={classes.button}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              onClick={() => {\n                sendChatAction({\n                  from: user,\n                  msg: textValue,\n                  topic: activeTopic\n                });\n                changeTextValue('');\n              }}\n            >\n              Send\n            </Button>\n          </div>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Dashboard from './Dashboard';\nimport Store from './Store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store>\n        <Dashboard />\n      </Store>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}